{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"INq8gpKmS773","outputId":"8455fbfd-864d-4ccc-cbba-517ffa321d95","executionInfo":{"status":"ok","timestamp":1688222497203,"user_tz":-330,"elapsed":11802,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikit-plot\n","  Downloading scikit_plot-0.3.7-py3-none-any.whl (33 kB)\n","Requirement already satisfied: matplotlib>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from scikit-plot) (3.7.1)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.10/dist-packages (from scikit-plot) (1.2.2)\n","Requirement already satisfied: scipy>=0.9 in /usr/local/lib/python3.10/dist-packages (from scikit-plot) (1.10.1)\n","Requirement already satisfied: joblib>=0.10 in /usr/local/lib/python3.10/dist-packages (from scikit-plot) (1.2.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.1.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (0.11.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (4.40.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.4.4)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.22.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (23.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (8.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (3.1.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.4.0->scikit-plot) (2.8.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->scikit-plot) (3.1.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=1.4.0->scikit-plot) (1.16.0)\n","Installing collected packages: scikit-plot\n","Successfully installed scikit-plot-0.3.7\n","Collecting adam\n","  Downloading adam-0.0.0.dev0-py2.py3-none-any.whl (2.6 kB)\n","Installing collected packages: adam\n","Successfully installed adam-0.0.0.dev0\n"]}],"source":["!pip install scikit-plot\n","!pip install adam"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"zw5wb9iIX6p9","executionInfo":{"status":"ok","timestamp":1688222509001,"user_tz":-330,"elapsed":6712,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import keras\n","from keras.utils import to_categorical\n","#Import Libraries before model creation\n","from keras.models import Sequential\n","from keras.layers import Conv2D,MaxPooling2D,BatchNormalization\n","from keras.layers import Dense,Dropout,Activation,Flatten\n","from keras.losses import categorical_crossentropy\n","from keras.optimizers import Adam\n","from keras.regularizers import l2\n","from keras.callbacks import EarlyStopping\n","from sklearn.metrics import accuracy_score\n","from keras.preprocessing.image import ImageDataGenerator\n","from sklearn.metrics import confusion_matrix,classification_report\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lItHcaqjX6sR","outputId":"2aa21f1a-a930-4b98-9a5a-51ff1254adef","executionInfo":{"status":"ok","timestamp":1688222646288,"user_tz":-330,"elapsed":9,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset loaded successfully\n"]}],"source":["emotion_data = pd.read_csv('fer2013.csv')\n","print('Dataset loaded successfully')\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"cyCE0rRsX6uh","outputId":"aeaa7b64-d2f2-4a61-9667-93b9be793979"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-9e707748-0c94-47b0-962a-78b9192dd4f6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>emotion</th>\n","      <th>pixels</th>\n","      <th>Usage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...</td>\n","      <td>Training</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>151 150 147 155 148 133 111 140 170 174 182 15...</td>\n","      <td>Training</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>231 212 156 164 174 138 161 173 182 200 106 38...</td>\n","      <td>Training</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...</td>\n","      <td>Training</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84...</td>\n","      <td>Training</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e707748-0c94-47b0-962a-78b9192dd4f6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9e707748-0c94-47b0-962a-78b9192dd4f6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9e707748-0c94-47b0-962a-78b9192dd4f6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   emotion                                             pixels     Usage\n","0        0  70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...  Training\n","1        0  151 150 147 155 148 133 111 140 170 174 182 15...  Training\n","2        2  231 212 156 164 174 138 161 173 182 200 106 38...  Training\n","3        4  24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...  Training\n","4        6  4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84...  Training"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["emotion_data.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"_7XSatm_X6yQ","outputId":"14619f0a-ec7f-42e9-bb2e-74dd4fe9f824"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-cc459f47-b20c-4d53-8496-f5572156240b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>emotion</th>\n","      <th>pixels</th>\n","      <th>Usage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>35882</th>\n","      <td>6</td>\n","      <td>50 36 17 22 23 29 33 39 34 37 37 37 39 43 48 5...</td>\n","      <td>PrivateTest</td>\n","    </tr>\n","    <tr>\n","      <th>35883</th>\n","      <td>3</td>\n","      <td>178 174 172 173 181 188 191 194 196 199 200 20...</td>\n","      <td>PrivateTest</td>\n","    </tr>\n","    <tr>\n","      <th>35884</th>\n","      <td>0</td>\n","      <td>17 17 16 23 28 22 19 17 25 26 20 24 31 19 27 9...</td>\n","      <td>PrivateTest</td>\n","    </tr>\n","    <tr>\n","      <th>35885</th>\n","      <td>3</td>\n","      <td>30 28 28 29 31 30 42 68 79 81 77 67 67 71 63 6...</td>\n","      <td>PrivateTest</td>\n","    </tr>\n","    <tr>\n","      <th>35886</th>\n","      <td>2</td>\n","      <td>19 13 14 12 13 16 21 33 50 57 71 84 97 108 122...</td>\n","      <td>PrivateTest</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc459f47-b20c-4d53-8496-f5572156240b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cc459f47-b20c-4d53-8496-f5572156240b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cc459f47-b20c-4d53-8496-f5572156240b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["       emotion                                             pixels        Usage\n","35882        6  50 36 17 22 23 29 33 39 34 37 37 37 39 43 48 5...  PrivateTest\n","35883        3  178 174 172 173 181 188 191 194 196 199 200 20...  PrivateTest\n","35884        0  17 17 16 23 28 22 19 17 25 26 20 24 31 19 27 9...  PrivateTest\n","35885        3  30 28 28 29 31 30 42 68 79 81 77 67 67 71 63 6...  PrivateTest\n","35886        2  19 13 14 12 13 16 21 33 50 57 71 84 97 108 122...  PrivateTest"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["emotion_data.tail()"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K4VGzYRoX60W","outputId":"f4364c0a-7a0d-409c-f01b-b260e69617c1","executionInfo":{"status":"ok","timestamp":1688222658797,"user_tz":-330,"elapsed":372,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Training    622\n","Name: Usage, dtype: int64"]},"metadata":{},"execution_count":10}],"source":["emotion_data.Usage.value_counts()"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"OahOo9NUX630","executionInfo":{"status":"ok","timestamp":1688222662376,"user_tz":-330,"elapsed":379,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[],"source":["#Pull out dataset in different categories\n","data_train = emotion_data[emotion_data['Usage']== 'Training'].copy()\n","data_val = emotion_data[emotion_data['Usage']=='PublicTest'].copy()\n","data_test = emotion_data[emotion_data['Usage']=='PrivateTest'].copy()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"05fwOwaGeCTO","outputId":"7a80b192-867a-409e-f494-09880d329eba","executionInfo":{"status":"ok","timestamp":1688222679763,"user_tz":-330,"elapsed":502,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Train shape: (622, 3)\n","Validation shape: (0, 3)\n","Test shape: (0, 3)\n"]}],"source":["print('Train shape: {}\\nValidation shape: {}\\nTest shape: {}'.format(data_train.shape,data_val.shape,data_test.shape))\n"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"Cr8juvraeCWw","executionInfo":{"status":"ok","timestamp":1688222683194,"user_tz":-330,"elapsed":4,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[],"source":["#Initialize Parameters\n","num_classes = 7\n","epochs = 55\n","batch_size = 64\n","num_features = 32\n","width, height = 48,48"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A8StUQTOe33t","outputId":"5a95afe5-8aa5-4cac-a398-58e494c8bbf6","executionInfo":{"status":"ok","timestamp":1688222687160,"user_tz":-330,"elapsed":483,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(623, 3)"]},"metadata":{},"execution_count":15}],"source":["emotion_data.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"DZulZgDQe35m","outputId":"e46052ef-46de-4618-e2d9-8e29696a5a97"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-ccf6fe47-a0fb-4092-b858-6033e5687bbe\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>35887.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.323265</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.873819</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>6.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ccf6fe47-a0fb-4092-b858-6033e5687bbe')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ccf6fe47-a0fb-4092-b858-6033e5687bbe button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ccf6fe47-a0fb-4092-b858-6033e5687bbe');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["            emotion\n","count  35887.000000\n","mean       3.323265\n","std        1.873819\n","min        0.000000\n","25%        2.000000\n","50%        3.000000\n","75%        5.000000\n","max        6.000000"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["emotion_data.describe()"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M919DWMqe38K","outputId":"efe66e0f-83a3-4a6d-ff5f-6b8ecb419496","executionInfo":{"status":"ok","timestamp":1688222766719,"user_tz":-330,"elapsed":675,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["emotion    0\n","pixels     0\n","Usage      1\n","dtype: int64"]},"metadata":{},"execution_count":16}],"source":["#checking for missing values\n","emotion_data.isna().sum()"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"TaAE8Pfue395","outputId":"cc70f74c-4826-42ca-9a70-f4057e442c63","executionInfo":{"status":"ok","timestamp":1688222771688,"user_tz":-330,"elapsed":1256,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='Count'>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["sns.set_theme(style='darkgrid', palette='deep', font='sans-serif', font_scale=1)\n","sns.histplot(data= emotion_data,kde = True)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"PtvsEur6e4AC","executionInfo":{"status":"ok","timestamp":1688222780696,"user_tz":-330,"elapsed":438,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[],"source":["#Data Preprocessing\n","#Perform CRNO (CRNO stands for Convert,Reshape, Normalize, one-hot-encoding)\n","def CRNO(df,dataName):\n","    df['pixels'] = df['pixels'].apply(lambda pixel_sequence: [int(pixel) for pixel in pixel_sequence.split()])\n","    data_X = np.array(df['pixels'].tolist(),dtype='float32').reshape(-1,width,height,1)/255.0\n","    data_Y = to_categorical(df['emotion'],num_classes)\n","    print(dataName, \"_X shape: {}, \", dataName, \"_Y shape: {}\".format(data_X.shape, data_Y.shape))\n","    return data_X,data_Y"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vsvGGdQoe4Cn","outputId":"609d9488-907c-4c2e-8fad-4fd55cb92c38","executionInfo":{"status":"ok","timestamp":1688222785358,"user_tz":-330,"elapsed":515,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["train _X shape: {},  train _Y shape: (622, 48, 48, 1)\n","validation _X shape: {},  validation _Y shape: (0, 48, 48, 1)\n","test _X shape: {},  test _Y shape: (0, 48, 48, 1)\n"]}],"source":["train_X,train_Y = CRNO(data_train,'train')\n","val_X,val_Y = CRNO(data_val,'validation')\n","test_X,test_Y = CRNO(data_test,'test')"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Dd6HfzJe4ES","outputId":"9f561784-9b18-49ca-8366-0ca9ec160293","executionInfo":{"status":"ok","timestamp":1688222797216,"user_tz":-330,"elapsed":1511,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 48, 48, 64)        640       \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 48, 48, 64)        36928     \n","                                                                 \n"," batch_normalization (BatchN  (None, 48, 48, 64)       256       \n"," ormalization)                                                   \n","                                                                 \n"," activation (Activation)     (None, 48, 48, 64)        0         \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 24, 24, 64)       0         \n"," )                                                               \n","                                                                 \n"," dropout (Dropout)           (None, 24, 24, 64)        0         \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 24, 24, 128)       73856     \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 24, 24, 128)       147584    \n","                                                                 \n"," batch_normalization_1 (Batc  (None, 24, 24, 128)      512       \n"," hNormalization)                                                 \n","                                                                 \n"," activation_1 (Activation)   (None, 24, 24, 128)       0         \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 12, 12, 128)      0         \n"," 2D)                                                             \n","                                                                 \n"," dropout_1 (Dropout)         (None, 12, 12, 128)       0         \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 12, 12, 256)       33024     \n","                                                                 \n"," conv2d_5 (Conv2D)           (None, 6, 6, 256)         65792     \n","                                                                 \n"," batch_normalization_2 (Batc  (None, 6, 6, 256)        1024      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_2 (Activation)   (None, 6, 6, 256)         0         \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 3, 3, 256)        0         \n"," 2D)                                                             \n","                                                                 \n"," dropout_2 (Dropout)         (None, 3, 3, 256)         0         \n","                                                                 \n"," flatten (Flatten)           (None, 2304)              0         \n","                                                                 \n"," dense (Dense)               (None, 128)               295040    \n","                                                                 \n"," batch_normalization_3 (Batc  (None, 128)              512       \n"," hNormalization)                                                 \n","                                                                 \n"," dense_1 (Dense)             (None, 128)               16512     \n","                                                                 \n"," batch_normalization_4 (Batc  (None, 128)              512       \n"," hNormalization)                                                 \n","                                                                 \n"," dropout_3 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_2 (Dense)             (None, 7)                 903       \n","                                                                 \n","=================================================================\n","Total params: 673,095\n","Trainable params: 671,687\n","Non-trainable params: 1,408\n","_________________________________________________________________\n"]}],"source":["#Build the model\n","model = Sequential()\n","#Module1 conv<\n","model.add(Conv2D(2*num_features,kernel_size=(3,3),padding='same',data_format='channels_last',input_shape=(width, height, 1)))\n","model.add(Conv2D(2*num_features,kernel_size=(3,3),padding='same'))\n","model.add(BatchNormalization())\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D())\n","model.add(Dropout(rate=0.2))\n","#Module2 conv<\n","model.add(Conv2D(2*2*num_features,kernel_size=(3,3),padding='same'))\n","model.add(Conv2D(2*2*num_features,kernel_size=(3,3),padding='same'))\n","model.add(BatchNormalization())\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D())\n","model.add(Dropout(rate=0.2))\n","#Module3 conv<\n","model.add(Conv2D(2*2*2*num_features,kernel_size=(1,1),padding='same'))\n","model.add(Conv2D(2*2*2*num_features,kernel_size=(1,1),strides=(2,2)))\n","model.add(BatchNormalization())\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D())\n","model.add(Dropout(rate=0.2))\n","#Module4 fc<\n","model.add(Flatten())\n","model.add(Dense(units=128))\n","model.add(BatchNormalization())\n","model.add(Dense(units=128))\n","model.add(BatchNormalization())\n","model.add(Dropout(rate=0.2))\n","model.add(Dense(num_classes,activation='softmax'))\n","\n","model.compile(loss='categorical_crossentropy',optimizer=Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999),metrics=['accuracy'])\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZTCfw6fx3zXn","outputId":"c5905077-670d-449c-d678-f355c5b75bd6"},"outputs":[{"output_type":"stream","name":"stdout","text":["449/449 - 1064s - loss: 1.3119 - accuracy: 0.5003 - val_loss: 1.4064 - val_accuracy: 0.4508 - 1064s/epoch - 2s/step\n"]}],"source":["#Training the model\n","es = EarlyStopping(monitor='val_loss', patience = 10, mode = 'min', restore_best_weights=True)\n","history = model.fit(train_X,train_Y,batch_size=batch_size,epochs=1,verbose=2,callbacks=[es],validation_split=0,validation_data=(val_X,val_Y),shuffle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XKY42iIZ3za3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"153fcc20-59da-48d0-da58-d61b2e4510f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["113/113 [==============================] - 32s 283ms/step\n","VGG16 Model Accuracy on test set: 0.4377\n"]}],"source":["#Evaluate the test performance\n","test_true = np.argmax(test_Y, axis=1)\n","test_pred = np.argmax(model.predict(test_X), axis=1)\n","print(\"VGG16 Model Accuracy on test set: {:.4f}\".format(accuracy_score(test_true, test_pred)))"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"z8bVJyMN3zkf","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ba9fa128-8519-4a46-dab2-1c8bb7648c8f","executionInfo":{"status":"ok","timestamp":1688222803207,"user_tz":-330,"elapsed":512,"user":{"displayName":"SHAIK MOHAMMAD WASEEM AKRAM 20BCD7141","userId":"05198691681285715221"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["VGG16 model is successfully executed and saved\n"]}],"source":["import json\n","model_json = model.to_json()\n","with open(\"model.json\", \"w\") as json_file:\n","  json_file.write(model_json)\n","  model.save_weights(\"model.h5\")\n","print(\"VGG16 model is successfully executed and saved\")"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}